## Episode - 1 & 2

React alone dosen't make our app fast (its a small piece of javascript code), there are lot of other things (packages) that comes with create-react-app that bundles, minifies, compresses, git init, caches, optimizes images, code splits etc.. and makes the app fast and production ready

To configure the remote git repository (which is created on github by clicking create new repository) to our project, follow below steps
git init - To convert our local code into a git repository
git branch -M main - By default main branch is "master". So to make the main branch as "main" use this command
Create readme file (README.md) if you dint add it while create git repository on github
Now commit and push your local code in your local git repository to the remote git repository. But your local git does not know what is remote repository. So use below command (you can copy this command from your remote git repository steps, it will be mentioned there clearly)
git remote add origin git@github.com:sakethkota731/namaste-react.git
Now push the code to git using below commands
git add .
git commit -m "episode-01"
git push origin main
(origin means to the remote repository, it means push to the remote repository main branch)

npm init - (It brings npm into our code, so package.json file will be created with this command)

Versions
2.8.3 - in this 2 is major version, 8 in minor versin, 3 is patch version.
If there is any patch/bug fix which dosent require developers to change code we upgrade patch version.
If there is any new functional or minor changes like that which dosent require developers to change code we upgrade minor version.
If there is any existing functional changes or major changes like that which requires developers to change code we upgrade major version.
^2.8.3 - this means it is not fixed and if there is minor changes (upto minor version changes) our version can get updated in package.json. If there is any change till 2.9.9 it will get upgraded automatically to that version (to the latest upto limit) after npm i
~2.8.3 - this means it is not fixed and if there is patch fix (upto patch version changes) our version can get updated in package.json. If there is any change till 2.8.9 it will get upgraded automatically to that version (to the latest upto limit) after npm i
2.8.3 - this means 2.8.3 always and no upgrades

After running - npm init (it will ask couple of question like, package name, description etc), a package.json file will be created with the details that we have given in a JSON format

Package.json is just a configuration for the npm (npm manages the dependecies (packages) of our project, like it stores the version number etc..)

1st main important package is bundler. There are various bundlers in market like webpack, veet, parcel etc.. All bundlers does the same thing (i.e bundles the app and make the app ready for production), only the algorithm that it uses behind differs

Parcel is a dev dependency (i.e bundling, minification, chunking and all are done at lcoal dev environment and not in production)

package-lock.json stores the exact version of installed package (i.e locks the version), whereas package.json store the approximate version of the package.

package-lock.json maintains the package names, its exact version and the versions of all its depedencies which are there inside the node_modules. That's why it is huge

We should not push node_modules in git (include it in .gitignore file), but package.json and package-loack.json should be pushed to github or git repository. Because you can regenerate node_modules on the server

integrety prop in every package object in package-lock.json stores the hash value which keeps track of version and makes sure that the version which is in local is the exact version which is deployed to prod

IGNITE THE APP

Bundlers - Parcel, Webpack, Veet etc..

npm i parcel

npx parcel index.html - Our app will be hosted on to "http://localhost:1234" port. That is parcel created a local server for us (hosted onto a server) and given us a port (1234). That means, Parcel creates a development build from the source index.html and hosts that dev build into the "http://localhost:1234" server.
(Note: npm is to install a package, whereas npx is to execute a package)

Using CDN to get react is a costly operation as it will make a network call to the CDN server to get react. If react is inside our node_modules, it would be easy to use it in our code.
Another disadvantage of using CDN is, lets say we used this CDN - https://unpkg.com/react@18/umd/react.development.js, in future if the react version changed to 19, to use that we have to change the URL again. So it would be easy for us to have react as a dependency and manage it in package.json

npm i react
npm i react-dom

Remove CDNs

import React from "react"
import ReactDOM from "react-dom"

If you run the server you will get an error that says - "Browser scripts cannot have imports or exports". This is because javascript does not recognize import. Browser considers this - <script src="./App.js"></script> as a normal javascript file.
Now we need to tell the browser that it's not a normal javascript file, it is a module by adding type="module" to the script tag - <script type="module" src="./App.js"></script>

Parcel does HMR (Hot module replacement) by using a File watching algorithm which is written in C++ (With this upon saving the file, browser will refresh automatically and new changes can be seen on the page). That is, as soon as you save, it will build the app once again.
Everytime you save, the build time reduces as the parcel is doing caching. It stores the cache in the .parcel-cache folder which is created when we installed and executed parcel (i.e after our first build)

# Parcel

    - Creates Dev build
    - Creates local server
    - HMR = Hot module replacement
    - File watching algorithm (written in C++)
    - Caching - Faster builds
    - Image Optimization
    - Minification (replaces large names with small names etc.. for production builds)
    - Bundling
    - Compressing (i.e reduces the size and ships to production)
    - Consistent Hashing (Outup dosen't change if the names dont change, so consistent hashing is helpful in that case)
    - Code Splitting
    - Diiferential Bundling (supports older browsers i.e different bundles for different browsers)
    - Diagnostic (Proper error messages on console with links that redirects to the code)
    - Error Handling
    - HTTPs
    - Tree Shaking (Our project can have 100 functions, so parcel does tree shaking and removes unused functions and unused code)
    - Different dev and prod bundles/builds (because prod build takes times as it has extra minifications compared to dev build )

    npx parcel index.html - dev build
    npx parcel build index.html - prod build
    But we will get an error if we run this because in package.json we have a property - main: "App.js". This is a conflict as npm sees App.js as entry point but in the  "npx parcel build index.html" command we are giving index.html as entry point, so it gives error. Remove that main: "App.js" property from package.json, you will not get any error

    Upon running "npx parcel index.html" or "npx parcel build index.html" it creates dist folder and minifies/bundles files and puts them inside the dist folder. Whatever UI you see on the browser is coming from the files inside the dist folder, not from the actual files. Whenever we save, dist folder interacts with the .parcel-cache folder to see the recent changes and generate the new build in even lesser time and store new changes in the dist folder which will be reflected in the UI

    By running "npx parcel build index.html", it will create 3 files in the dist folder (other 2 files are mapper files). These 3 files are the production ready code of our app.
    a. 1 HTML file  (index.html) - i.e Minified, Compressed and Combined all the html files into one
    b. 1 CSS file (index.2342dsfsd.css) - i.e Minified, Compressed and Combined all the css files into one
    c. 1 JS file (index.fsedf2132) - i.e Minified, Compressed and Combined all the js files into one

    You shouldn't push "dist" and  ".parcel-cache" folders in github as they can be regenerated on the server by running the command "npx parcel index.html",  like "node_modules". So put them in .gitignore

    (LOCAL FE CODE) ---pushed to git-----> (GIT) <-----fetches from git and runs the npx parcel index.html that creates all dist and other folders--- (SERVER)

    browserslist - this package comes with parcel. With the help of this package you can make your app work with different browsers and also older versions of browser. For this to work, you need to mention it in the package.json file like below
    "browserslist": [
        "last 2 versions",
        // "last 2 chrome versions"
    ]

## Episode - 3

You can add script tags in package.json as a shortcut to excecute npm packages.
Example: If you write this script tag - "start": "parcel index.html", you can exceute or start the parcel/server by running just - "npm run start" command instead of running "npx parcel index.html".
You can run "npm start" instead of "npm run start" as both are same because start is a reserved keyword on npm, But you can't do this with "npm run build".

React - It will have core features of react and it can create React elements which is nothing but objects
ReactDOM - It will interact with HTML DOM and will convert React elements to HTML elements and will put it in HTML DOM by replacing (not appending) the children of root element.

JSX - HTML or XML like syntax

JSX and React are seperate. JSX is not a part of React like many think. Creating ReactElements using pure core React is tough so developers have came up with JSX which is similar to HTML.

JS Engine and React can't understand JSX. JSX will be converted to React.createElement by Parcel - babel, which React can understand, and this React.createElement will be again converted to Javascript object that JS Engine can understand. So we can write JSX (HTML like syntax) within Javascript code. That means we can write it together in same file.

babel - Transpiler (Converts JSX syntax to React.createElement that React can understand)

If we have to give attributes in JSX then it should be camelCase - className (instead of class),tabIndex (instead of tabindex),onClick (instead of click)

If you are writing JSX, you need to write in single line like below
const jsxHeading = <h1 id="heading" >Namaste React using JSX 🚀</h1>;

If you want to write JSX in multiple lines then you should write like below because JSX needs to understand where it started and where it ended
const jsxHeading = (

  <h1 id="heading" className="head">
    Namaste React using JSX 🚀
  </h1>
);

React Components - 1. Class based components 2. Functional Components

If you are creating a functional components then name it with a capital letter first (Ex: HeadingComponent), else you will get an error. It's react way of recognising functional components.

React Functional Component is a normal javascript function that returns some piece of JSX (i.e it returns a ReactElement (as babel converts that JSX to React.createElement)).
NOTE: Functional Component returns only one ReactElement (but it can be nested).

\*\*NOTE: To render a ReactElement to browser you do - "root.render(heading)". But to render React Component onto the browser we do this - "root.render(<HeadingComponent />)"
Similarly if you want to put an element inside a JSX you do like below

 <h1 id="heading" className="head">
    {title}
    Namaste React using JSX 🚀
  </h1>
But if you want to put a component inside JSX then you do like below
 <h1 id="heading" className="head">
    <Title />
    <Title></Title>
    {Title()}
    Namaste React using JSX 🚀
  </h1>
NOTE: Babel is converting all the above JSX into ReactElement which is nothing but a javascript object

If you put curly braces inside JSX - {}, then you can write any piece of javascript inside those curly braces

Cross Site Scripting - Lets say you have called an API which gives Malicious data (which is rare) and include that in your JSX like below
const data = api.getData()

 <h1 id="heading" className="head">
    {data}
    Namaste React using JSX 🚀
  </h1>
In this case the hacker will get a chance to run any javascript code on your browser (by doing this he can do many things like stealing cookies or localstorage data etc..)
But JSX will handle such things. Whenever we get such malicious data and include it inside curly brackets - {}, then JSX will first sanitise the data and then only it shows in the browser. This will protect our App from Cross Site Scriptings.

NOTE: React is readable not because of React, but it's because of JSX which is making it much more readable than React and this JSX is independent from React.

## Episode - 4

Prop - Passing a prop to a component is just like passing an argument to a function. Whatever props we pass to a component, react will wrap all those props into an object and will pass that object to that component. If you want to pass data dynamically to a component, you can pass it as props

Config Driver UI - Our UI is derieved by config (which we get from API response). For example - In swiggy app you may have different offers in different sate, for that you cant build different UIs for each state. So based on the configs (state property) you get from backend backend you show different offers for different state (based on location selected). Config is the data coming from the API, which keeps on changing based on different factors like user, location etc.

Cloudinary - It is a CDN where we can store all our app related images

Add a unique key (key={id}) to each loop item in react - Reason for this is, it helps react optimize the render cycle. Lets say we have 1000 loop items (component) and a new 2 cards came in, 1 at first place and other somewhere in between. Now react will not know where exactly to place that cards. So it will re-render the whole 1002 items again which is time consuming (especially when it is an infinite scroll). So the best practice is to add a unique key (key={id}) for each loop item so that react will be able to identify where exactly to place those 2 new items instead of re-rendering the whole list of items again, which will be a huge code optimization. If we don't give a unique key for each item in a loop, then react will give a warning in the console.
Note: Here item means a component/element

React does not recommend to use indexes as unique key - Because this may cause a negative impact if the order of the list of items changes. If you don't have a unique id, as backend to send it else in the worst case you can use index which is still better than not passing any key.

Optional Chaining - a?.b?.c => If the object or the function is not available, then it will return undefined, instead of throwing an error.

While using React, developers don't need to bother on how to update the actual DOM like how we do with jQuery by parsing the DOM to find the element that needs to be updated. In react you just need to focus on how the current state of the UI is at different intervels and need to update the state that's it. Rest is taken care by React and ReactDOM to create a virtual DOM and compare it with actual DOM and update only those node on the actual DOM which are change, instead of re-rendering the whole DOM tree (which is actually done on page refresh).

Virtual DOM - It is like a copy of an actual DOM, which is created by ReactDOM based on the JSX we returned and renders this virtual DOM to actual DOM with the help of root.render() method.

Reconciliation - Virtual DOM is not rendered directly to browser application. React uses reconciliation, which is a diffing algorithm to compare both vitual DOM and real DOM, and find out what exactly changed and only modify that instead of rerendering entire DOM.
There are 3 scnarios:

1. If component types are different like - <a><p>Text</p></a> and <b><p>Text</p></b> then that entire tree node is replaced (rerendered) with new node.
2. If component types are same and attributes are different - <div className="abc"></div> <div className="xyz"></div> the entire node no need to be rerendered. Only that specific attribute will be modified/replaced.
3. If there are list of elements on same level and new element gets added to that list at end, then reconciliation algorithm will compare each list item from start and adds last item at end. Now if an element get added at beginning, then when ReactDOM starts diffing from first element, it finds first elements from both trees different and will rerender all the list which is wrong. So we need to provide unique key to each item in a list to avoid this problem

## BEST PRACTICES

Config driven UI
Passing unique key for each item (component) inside a loop

What is Virtual DOM? - https://reactjs.org/docs/faq-internals.html
What is Reconciliation in React? - https://reactjs.org/docs/reconciliation.html
What is React Fiber? - https://github.com/acdlite/react-fiber-architecture
Why we need keys in React? When do we need keys in React?
Can we use index as keys in React? - https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/

## Episode - 5

Default export - export default Component => import Component from "../src/Component" (Used when there is a single component in a file)
Named export - export const Component => import { Component } from "../src/Component" (Used when there are multiple components in a file)
You can use Default export and Named export together. But only thing is you cannot use default export more than once in a file.

When we change the data, our UI should automatically change based on that. Like lets say we have an restaurantArray (let restaurantArray = [{name:"R1"}]), and if we try to manypulate this array on a click event in react, our UI Restaurant Cards will not get updated, but the data will get changed which you can see it on console log. This is where React will help us by providing useState hook. (That is intead of using normal javascript variable you need to use react state variable, which defines the state of the component or app).
React/Angular/Vue all these frameworks primary goal is to keep the data layer in sync with the UI layer (Data Layer | UI Layer), that is by doing DOM manipulations. Fastness of these frameworks will depend on how efficiently they are manipulating/changing the DOM on the data change. That is why React is much faster as it using Virtual DOM, Diffing alogorithm, Reconciliation etc.. for faster DOM manipulations

## React Hooks

It is just a normal javascript function which comes with special abilities (we can say them as utility functions) that react provides us. React will do named export of these hooks so that we can import them like this - import {useState} from 'react'. But it will default export React -
import React, {useState} from 'react'

useState - Super powerful variable (state variable). Whenever a state variable updates, React re-renders the component

(Note: Why React is fast? - Because React is doing efficient DOM manipulation. Not because it bundles, minifies etc.. which are done by other packages like webpack, parcel etc and not by React. React is fast because it does the DOM manipulations much faster compared to other libraries in much lesser and efficient code behind the scenes. This is the core logic of React. That is why React is the best programming language)

Check Reconciliation.jpg file under static folder
